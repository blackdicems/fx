const { createApp: t } = Vue;
t({ data: () => ({ current: { input_symbol: "", input_balance: "", input_risk: "", input_open_price: "", input_stop_lost_price: "", pipette_value: "", lost_cost_value: "", recommend_lot_value: "", float_value: "" }, xauusd_2: { input_symbol: "xauusd_2", input_balance: 2e4, input_risk: 1, input_open_price: 1820, input_stop_lost_price: 1822, pipette_value: 200, lost_cost_value: 200, recommend_lot_value: .1, float_value: 100 }, xauusd_3: { input_symbol: "xauusd_3", input_balance: 2e4, input_risk: 1, input_open_price: 1830.123, input_stop_lost_price: 1830.456, pipette_value: 340, lost_cost_value: 200, recommend_lot_value: .59, float_value: 1e3 }, eurusd_5: { input_symbol: "eurusd_5", input_balance: 2e4, input_risk: 1, input_open_price: 1.06392, input_stop_lost_price: 1.06401, pipette_value: 9, lost_cost_value: 200, recommend_lot_value: .1, float_value: 1e5 }, us30_1: { input_symbol: "us30_1", input_balance: 2e4, input_risk: 1, input_open_price: 34000.1, input_stop_lost_price: 34000.2, pipette_value: 1, lost_cost_value: 200, recommend_lot_value: .1, float_value: 10 } }), methods: { input_symbol_change(t) { "xauusd_2" == t.target.value ? this.current = this.xauusd_2 : "xauusd_3" == t.target.value ? this.current = this.xauusd_3 : "eurusd_5" == t.target.value ? this.current = this.eurusd_5 : "us30_1" == t.target.value && (this.current = this.us30_1) }, input_balance_change(t) { console.log("input_balance_change"), this.to_sl_lost(), this.main_cal() }, input_risk_change(t) { console.log("input_risk_change"), this.to_sl_lost(), this.main_cal() }, input_open_price_change(t) { console.log("input_open_price_change"), this.to_sl_range(), this.main_cal() }, input_stop_lost_price_change(t) { console.log("input_stop_lost_price_change"), this.to_sl_range(), this.main_cal() }, to_sl_range(t) { this.current.pipette_value = (Math.abs(parseFloat(this.current.input_open_price).toFixed(2) - parseFloat(this.current.input_stop_lost_price).toFixed(2)).toFixed(2) * this.current.float_value).toFixed(0) }, to_sl_lost(t) { this.current.lost_cost_value = this.current.input_balance * this.current.input_risk / 100 }, main_cal(t) { this.current.recommend_lot_value = (this.current.lost_cost_value / this.current.pipette_value).toFixed(2) } } }).mount("#app");